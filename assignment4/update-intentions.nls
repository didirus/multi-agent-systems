; In this file, once it has been determined which desire to pursue,
; the most important intention at the moment is determined. All
; functionality is grouped per desire.

to update-intentions run (word "pursue-" desire) end

; _________________________
; DESIRE: FOLLOWING ROUTINE

to pursue-following-routine
  ; If between stops, simply intent to continue to drive.
  if in-transit? [set intention i>DRIVE stop]
  
  ; If in district set intentions for drop off and pick up
  if home? [
    
    ; If at stop, and any passenger wants to leave, intent to drop them off.
    if any bus_passengers (task wants-to-leave) [set intention i>DROP_OFF stop]
    
    ; If at stop, and no passenger wants to leave, but any passenger wants to enter, intent to pick them up.
    if not overloaded? and any get-passengers-at-stop current_stop (task wants-to-enter) [set intention i>PICK_UP stop] ]
  
  ; If at stop, but no one wants to either enter or leave, intent to continue to drive.
  set intention i>DRIVE
end

to-report wants-to-leave [passenger]
  ; Determines if `passenger` wants to leave at the current stop. This
  ; is the case if it is his destination, or if he needs to transfer here.
  
  report (destination-of passenger = current_stop) or (at-junction? and not fastest-option? destination-of passenger);in-my-district destination-of passenger)
end

to-report wants-to-enter [passenger]
  ; Determines if `passenger` wants to enter. This is the case
  ; if his destination is in the district I'm driving.
  
  report not at-junction? or fastest-option? destination-of passenger
end

to-report fastest-option? [destination]
  let route first table:get dijkstra (list current_stop destination)
  
  let fastest? true
  let my_reach 0
  
  ; My reach: check how far in the passengers shortest path I reach
  foreach route [
    let busstop ?
    if member? busstop stops-of district [
      if position busstop route > my_reach [
        set my_reach position busstop route ]]]
  
  ; This reach: Check how far in the passengers shortest path the overlapping districts reach
  foreach districts [
    let some_district ?
    if some_district != item district districts[
      if member? current_stop some_district [
        let this_reach 0
        foreach route [
          let busstop ?
          if member? busstop some_district [
            if position busstop route > this_reach [
              set this_reach position busstop route ]]]
        if this_reach > my_reach [
          set fastest? false]]]]
  report fastest?
end

to-report destination-of [passenger] report item 1 passenger end
to-report id-of [passenger] report item 0 passenger end

; __________________
; DESIRE: BEING IDLE

to pursue-being-idle ; If the desire is `desire>being_idle`, intent to stop.
  set intention "stop"
end