to check-inbox
  foreach inbox [ let message ?
    (run runresult (word "task [" (word "follow-" protocol-of message " ?1 ?2") "]") key-of message content-of message)]
  set inbox []
end

to send [recipient protocol key content]
  send-message recipient draft-message protocol key content
  if debug_messages [print (word "[" ticks "] Bus" bus_id " sent: " to-string-outgoing recipient protocol key content)]
end

to broadcast [protocol key content]
  foreach all-buses? [ let recipient ?
    send-message recipient draft-message protocol key content]
  if debug_messages [print (word "[" ticks "] Bus" bus_id " sent: " to-string-outgoing "broad" protocol key content)]
end

to-report draft-message [protocol key content]
  let message table:make
  table:put message "protocol" protocol
  table:put message "key" key
  table:put message "content" content
  report message
end

to-report tick-of [message] report item 0 message end
to-report sender-of [message] report item 1 message end
to-report protocol-of [message] report table:get item 2 message "protocol" end
to-report key-of [message] report table:get item 2 message "key" end
to-report content-of [message] report table:get item 2 message "content" end

to-report to-string-incoming [message]
  report (word "(to:" bus_id ",from:" sender-of message ",prot:" protocol-of message ",key:" key-of message")")
end

to-report to-string-outgoing [recipient protocol key content]
  report (word "(to:" recipient ",prot:" protocol ",key:" key ", cont:" content ")")
end