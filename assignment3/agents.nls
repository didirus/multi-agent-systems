__includes["update-intentions.nls" "go-to-next-stop.nls" "problems.nls" "init-buses.nls"]

extensions[table]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  bus_route
  bus_route_id
  bus_stop_counter
  capacity
  bus_routes
  role
  desire
  belief_busyness
  intention_act
  intention_loc ; maybe add other agents (for dropping, picking up)
  junctions
  busy_protocol_states
  busy_protocol_state
]

globals [graph]

to-report intersect [a b]
  report (filter [ member? ? b ] a)
end

to execute-actions
  update-desire
  update-beliefs
  update-intententions 
  ;if count buses = 1
  ;[
  ;   add-bus 1
  ;   add-bus 1
 ;    add-bus 1
  ;   add-bus 1
  ;   add-bus 1
  ;]  
  go-to-next-stop
  handle-protocols
end

to update-desire
  ifelse amount_passengers_waiting > 0 ; maybe add other buses passengers here through messages
    [set desire "transport"]
    [set desire "turn off"]
end

to update-beliefs
  set belief_busyness judge-busyness?
end

to handle-protocols
  handle-busy
end

to handle-busy
  if busy_protocol_state = "uninitiated"[
    if overloaded?[
      ; broadcast problem
      set busy_protocol_state "waiting_for_answers"
      ]
    ]
end

to-report judge-busyness?
  ; loop over all stations in route
  ; sum amount of waiting passengers
  ; report sum
  report 1
end

to-report overloaded?
  report capacity = length bus_passengers
end

to-report at-junction?
  report member? current_stop junctions
end

;to broadcast [message]
;  foreach buses[
;    [x] -> show (word x " -> " round i)
;  ]
;end