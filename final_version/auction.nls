to lead-auction
  if in-auction? [handle-auction stop]
  if initiate-auction? [ initiate-auction stop]
end

to-report initiate-auction?
  
  ; Based on random dice throw, declare myself to be auctioned.
  
  let dice_threshold 0.002
  let dice_throw random-float 1
  report dice_throw <= dice_threshold
end

to initiate-auction
  ; I decided to give myself up for auctioning. I will now broadcast this.
  
  broadcast "auction" auction.initiating_auction capacity?
  set auction/state auction:AWAITING_RESPONSE
end

to-report in-auction? report auction/state != auction:UNINITIATED end

to handle-auction
  
  if auction/state = auction:AWAITING_RESPONSE [
    
    ; Just opened the action. Waiting for bids.
    reset-auction-memory
    set auction/state auction:ABOUT_TO_AUCTION
    stop]
  
  if auction/state = auction:ABOUT_TO_AUCTION [ 
    
    ; Bids are in. Picking the winner.   
    finish-auction
    stop]
end

to finish-auction
  ifelse auction/alone_in_district [
    if debug_auctions [ debug (word "I was about to auction myself, but quit since I found out I'm the only one in my district")]]
  [
    ; Reassign myself to the winning district.
    
    let tuples table:to-list auction/cumulative_bids
    
    let max_district key-of first tuples
    let max_offer value-of first tuples / table:get auction/amount_of_bids max_district
    
    
    
    foreach tuples [ let tuple ?
      ; See which district placed the highest average bid.
      let current_offer value-of tuple / table:get auction/amount_of_bids key-of tuple
      if debug_auctions [ debug (word "D" (key-of tuple) " made an offer of " current_offer ".")]
      if current_offer > max_offer [
        set max_district key-of tuple
        set max_offer current_offer ]]
    
    if debug_auctions [ debug (word "D" max_district " won the action with an average bid of " max_offer ".")]
    get-assigned-to max_district]
  
  set auction/state auction:UNINITIATED
end

to reset-auction-memory
  set auction/cumulative_bids table:make
  set auction/amount_of_bids table:make
  set auction/alone_in_district true
end

to follow-auction [sender body details]
  
  if body = auction.initiating_auction and not in-auction? and assigned-to-district? [
    
    let offer fullness? ; The less capacity I have left, the more I need to win the auction.
    send sender "auction" auction.this_is_my_bid (list offer district)
    stop]
  
  if in-auction? and body = auction.this_is_my_bid [
    let dist sender-district-of details
    let offer offer-of details
    
    ; If the message is from my own district, I know I'm not alone.
    if dist = district [ set auction/alone_in_district false]
    
    table:increment auction/cumulative_bids dist offer
    table:increment auction/amount_of_bids dist 1
    stop]
end

to-report offer-of [details] report first details end
to-report sender-district-of [details] report item 1 details end