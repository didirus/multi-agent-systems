
; ------------------------------------------------------------------------------------
;                                       LEAD AUCTION
;                                AFTER READING ALL MESSAGES
; ------------------------------------------------------------------------------------

to lead-auction
  
  ; Initiating auction
  if I-should-initiate-auction? [ 
    initiate-auction 
    stop] 
  
  ; Handle auction
  if I-am-in-auction? [
    handle-auction
    stop]
  
end

; ------------------------------------------------------------
;                    Initiating auction
;
; - Decide whether to initiate an auction or not.
; - If I do initiate an auction, broadcast my bus_id and capacity
; ------------------------------------------------------------


to-report I-should-initiate-auction?
  
  ; TEMPORARY: based on random dice throw, declare myself to be auctioned.
  ; IN FUTURE: based on income, declare myself to be auctioned.
  
  if auction/state = auction:UNINITIATED [
    let dice_threshold 0.001
    let dice_throw random-float 1
  
    report dice_throw <= dice_threshold]
 
end

to initiate-auction
  
  ; I decided to give myself up for auctioning. I will now broadcast this
  ; to everyone.
  
  broadcast "auction" auction.initiating_auction auction-details?
  set auction/state auction:AWAITING_RESPONSE
  
end

to-report auction-details?
  report (list bus_id capacity?)
end


; ------------------------------------------------------------
;         Handle auction: MAKE DECISION TO STOP AUCTION
;
; - I am the bus being auctioned: I will decide to 
;   continue the auction or not
; ------------------------------------------------------------

to-report I-am-in-auction?
  report auction/state != auction:UNINITIATED
end

to handle-auction
  
  ; I am currently in auction. I will decide when to stop the auction.
  
  if not awaiting-first-bids? [
    ; Initial bids are in.
    
    if not I-want-to-continue-the-auction? [
      ; If I don't want to continue the auction
        finish-auction]]
  
  ; Apperently I want to continue the auction
  set auction/duration auction/duration + 1
  
end

to-report I-want-to-continue-the-auction?
  
  ; Decide wheter to continue the auction, based on an exponential
  ; decreasing chance. Or if no one placed a higher bid this round.
  
  let dice_throw random-float 1
  
  report new-bid-this-round? and dice_throw < chance-to-continue? and auction/duration <= auction/maximum_duration
  
end

to-report chance-to-continue? report 
  2 ^ -auction/duration 
end

to-report awaiting-first-bids? report chance-to-continue? = 1    end
to-report new-bid-this-round?  report auction/improvement = true end

; ------------------------------------------------------------
;               Handle auction: FINISHING AUCTION
;
; - I am the bus being auctioned: I will now decide a winner.
; - The winner will have to pay the Vickrey bid.
; - I will handle payment
; - I will end the protocol
; ------------------------------------------------------------

to finish-auction
  
  
end


; ------------------------------------------------------------------------------------
;                                       FOLLOW AUCTION
;                                 WHILE READING ALL MESSAGES
; ------------------------------------------------------------------------------------



to follow-auction [sender body details] ; This function is called after incoming 'auction' messages.
  
  ; Handle incomming auctions
  if body = auction.initiating_auction and not I-am-in-auction? [
      
      ; Make offer partly based on the capacity on the auctioned bus
      let offer make-first-bid [ get-auction-capacity details ]
      
      ; Create new message details      
      let auctioned_bus get-auction-id details
      let message_details offer-details auctioned_bus offer
      
      ; Let everyone know what my offer is
      broadcast "auction" auction.this_is_my_bid message_details
      stop]
  
  ; Handle bids
  
  ; I am being auctioned 
  if I-am-in-auction? [
    
    ; Someone wants to place a bid on me
    if body = auction.this_is_my_bid and get-auction-id details = bus_id [
      
      ; Get current offer
      let offer get-offer      details
      let buyer get-auction-id details
      
      ; If offer is better then others.
      ; This prioritises oldest bus (first in line) if multiple highest
      ; bids are offerred. 
      ifelse offer > winning_bid [
        
        set auction/winner buyer            ; current buyer
        set auction/vickrey_bid winning_bid ; previous highest bid, is now vickrey
        set auction/winning_bid offer]      ; new highest bid, is current offer
      [
        ; If current offer is better then vickrey bid, update
        if offer > auction/vickrey_bid [ set auction/vickrey_bid offer ]]]]
  
  ; If someone else made an offer, and I am not the auctioned bus.
  ; Possibly make a counter offer.  
  if body = auction.this_is_my_bid and not I-am-in-auction? [
    
    ; Get current offer
    let offer get-offer      details
    let buyer get-auction-id details
    
    
    
  ]
  
  
end

to-report get-auction-id       [details] first details  end
to-report get-auction-capacity [details] item 1 details end
to-report get-offer            [details] item 1 details end

to-report offer-details [auction_bus_id offer]
  report (list auction_bus_id offer)
end

to-report get-private-value [common_value]
  ; TEMPORARY based on fulness function
  ; IN FUTURE based on "money balance"
  report common_value + fullness? 
end
  
to-report common-value [capacity]
  report capacity / bus_type3_capacity
end  
  
to-report make-first-bid [capacity]
  ; Get private value based on common value
  let private_value get-private-value common-value capacity
  
  ; Calculate extreme value, determining range
  let extreme auction/bid_range * private_value
  
  ; Report a random value in bidding range   
  report private_value - extreme + random-float 2 * extreme
end

to-report make-counter-bid [capacity competing_bid]
  ; TEMPORARY: only go as far as initial private_bid + auction/bid_range
  ; IN FUTURE: possibly include resizing bid range accorind to correlated value
  
  ; Get private value based on common value
  let private_value get-private-value common-value capacity
  
  ; Calculate extreme value, determining range
  let extreme auction/bid_range * private_value
  
  let maximum_bid private_bid + extreme
  
  ; Report a random value in between competing and maximum bid
  report competing_bid + random-float (maximum_bid - competing_bid)
end

; ------------------------------------------------------------
;                      Handle bids
;
; - I am still being auctioned
; - I will store the details of the incomming bid
; ------------------------------------------------------------